{"remainingRequest":"/Users/songyanping/Documents/songyanping/blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/songyanping/Documents/songyanping/blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/songyanping/Documents/songyanping/blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/songyanping/Documents/songyanping/blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/songyanping/Documents/songyanping/blog/docs/fe/js/arrayDeduplication.md?vue&type=template&id=9b17b686&","dependencies":[{"path":"/Users/songyanping/Documents/songyanping/blog/docs/fe/js/arrayDeduplication.md","mtime":1618156780824},{"path":"/Users/songyanping/Documents/songyanping/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/songyanping/Documents/songyanping/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/songyanping/Documents/songyanping/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/songyanping/Documents/songyanping/blog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/songyanping/Documents/songyanping/blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h3\", { attrs: { id: \"数组去重\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#数组去重\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数组去重\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"_1、双重循环\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#_1、双重循环\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 1、双重循环\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [\n          _vm._v(\"第一层循环是需要去重的 array\"),\n          _c(\"br\"),\n          _vm._v(\n            \"\\n第二层循环是存放没有重复的元素的临时 array (初始化为空数组)\"\n          ),\n          _c(\"br\"),\n          _vm._v(\"\\n关键点我理解有两点：\"),\n          _c(\"br\"),\n          _vm._v(\"\\n1、如果存在相等（ 全等哦，=== ）则跳出第二层循环\"),\n          _c(\"br\"),\n          _vm._v(\n            \"\\n2、如果第二层循环 index: j 的值与 tmpArr 的长度 length 相等，则存到 tmpArr\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"注意： 对象和 NaN 不去重。\")])]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-js line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-js\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" a \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"3\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'2'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"false\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"function\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"getUniqueArray\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token parameter\" } }, [\n              _vm._v(\"arr\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"let\")\n            ]),\n            _vm._v(\" j\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"let\")\n            ]),\n            _vm._v(\" tmp_len\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"let\")\n            ]),\n            _vm._v(\" tmpArr \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"for\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"let\")\n            ]),\n            _vm._v(\" i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"0\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"len_i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"length\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"<\")\n            ]),\n            _vm._v(\" len_i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"++\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"for\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"j \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"0\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"tmp_len \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" tmpArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"length\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" j \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"<\")\n            ]),\n            _vm._v(\" tmp_len\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" j\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"++\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"//注意是 === \")\n            ]),\n            _vm._v(\"\\n\\t\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"if\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"===\")\n            ]),\n            _vm._v(\" tmpArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"j\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"break\")\n            ]),\n            _vm._v(\"\\n\\t\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\n\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"//j === tmp_len,则说明没有找到相同值\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"if\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"j \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"===\")\n            ]),\n            _vm._v(\" tmp_len\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\\ttmpArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"push\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"return\")\n            ]),\n            _vm._v(\" tmpArr\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\nconsole\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"log\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"getUniqueArray\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"a\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"  \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                '//[1, 2, 3, \"1\", true, \"2\", false, null, undefined, NaN, NaN]'\n              )\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"7\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"8\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"9\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"10\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"11\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"12\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"13\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"14\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"15\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"16\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"17\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"18\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"19\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"20\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"21\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"22\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"23\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"24\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"25\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"26\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"h4\", { attrs: { id: \"_2、indexof-方法\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_2、indexof-方法\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 2、indexOf 方法\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [\n          _vm._v(\n            \"借助辅助数组，和 indexOf() 方法，循环一遍需要去重的数组，要执行 n 次 indexOf() 方法，如果数组很大，还是比较耗时。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"注意：对象和 NaN 不去重。\")])]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-js line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-js\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" a \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"3\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'2'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"false\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"function\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"getUniqueArray\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token parameter\" } }, [\n              _vm._v(\"arr\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" tmpArr \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"for\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"let\")\n            ]),\n            _vm._v(\" i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"0\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"len \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"length\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"<\")\n            ]),\n            _vm._v(\" len\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"++\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"//关键点在这里\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"if\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"!\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"tmpArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"indexOf\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\">\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"-\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\\ttmpArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"push\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"return\")\n            ]),\n            _vm._v(\" tmpArr\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\nconsole\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"log\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"getUniqueArray\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"a\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                '//[1, 2, 3, \"1\", true, \"2\", false, null, undefined, NaN, NaN]'\n              )\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"7\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"8\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"9\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"10\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"11\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"12\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"13\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"14\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"15\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"16\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"h4\", { attrs: { id: \"_3、借助-object-键值对\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_3、借助-object-键值对\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 3、借助 Object 键值对\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [\n          _vm._v(\n            \"第一次写的时候，只是用元素本身作为 object 的 key，但是这样会导致一个问题，例如 1 和 ‘1’ 就是相同的 key,所以需要用元素数据类型和元素作为 key。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"特别好，除了对象外都去重了\")])]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-js line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-js\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" a \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"false\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"function\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"getUniqueArray\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token parameter\" } }, [\n              _vm._v(\"arr\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" obj \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" tmpArr \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"for\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"let\")\n            ]),\n            _vm._v(\" i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"0\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"len \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"length\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"<\")\n            ]),\n            _vm._v(\" len\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"++\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"if\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"!\")\n            ]),\n            _vm._v(\"obj\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"hasOwnProperty\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"typeof\")\n            ]),\n            _vm._v(\" arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"+\")\n            ]),\n            _vm._v(\" arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\\tobj\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"typeof\")\n            ]),\n            _vm._v(\" arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"+\")\n            ]),\n            _vm._v(\" arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\n\\ttmpArr \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" Object\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"values\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"obj\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"return\")\n            ]),\n            _vm._v(\" tmpArr\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\nconsole\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"log\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"getUniqueArray\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"a\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"  \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v('//[1, \"1\", true, false, null, undefined, NaN]')\n            ]),\n            _vm._v(\"\\n\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"7\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"8\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"9\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"10\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"11\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"12\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"13\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"14\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"15\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"16\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"17\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"18\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"19\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"h4\", { attrs: { id: \"_4、数组排序去重\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_4、数组排序去重\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 4、数组排序去重\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [\n          _vm._v(\n            \"先对需要去重的数组进行排序，如果循环已经排序好的数组，只需要比较当前元素和上一个元素是否相同就好。\"\n          ),\n          _c(\"br\"),\n          _vm._v(\"\\n执行效率比使用 indexOf 方法要快。\"),\n          _c(\"br\"),\n          _vm._v(\n            \"\\n如果要求是去重，并且不改变元素本身的相对位置，这种方法就不适用了。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"注意：对象和 NaN 不去重 数字 1 也不去重。\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-js line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-js\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"//排序循环去重\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" a \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"3\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'2'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"false\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"function\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"getUniqueArray\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token parameter\" } }, [\n              _vm._v(\"arr\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"// var sortedArr = arr.concat().sort()  //copy,不修改原有数组\"\n              )\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" sortedArr \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token constant\" } }, [\n              _vm._v(\"JSON\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"parse\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token constant\" } }, [\n              _vm._v(\"JSON\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"stringify\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"arr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"sort\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"  \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"//copy,不修改原有数组\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" seen \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" sortedArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"0\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"   \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"//赋值已排序数组的第一个元素作为seen\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" tmpArr \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"sortedArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"0\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"for\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" len \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" sortedArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"length\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" i \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"<\")\n            ]),\n            _vm._v(\" len\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\" i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"++\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"if\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"seen \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"!==\")\n            ]),\n            _vm._v(\" sortedArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\t\\t\\ttmpArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"push\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"sortedArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"  \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"//记录不重复的元素\")\n            ]),\n            _vm._v(\"\\n\\t\\t\\tseen \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" sortedArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"i\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"        \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"//更新新的seen\")\n            ]),\n            _vm._v(\"\\n\\t\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\n\\t\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"return\")\n            ]),\n            _vm._v(\" tmpArr\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\nconsole\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"log\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"getUniqueArray\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"a\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"7\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"8\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"9\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"10\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"11\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"12\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"13\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"14\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"15\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"16\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"17\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"18\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"19\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"20\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"21\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"h4\", { attrs: { id: \"_5、利用-es5-的-filter-简化循环流程\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_5、利用-es5-的-filter-简化循环流程\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 5、利用 ES5 的 filter 简化循环流程\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h5\", { attrs: { id: \"辅助-indexof-去重方法\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#辅助-indexof-去重方法\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 辅助 indexOf 去重方法\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"_6、借助-es6-一行代码去重\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_6、借助-es6-一行代码去重\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 6、借助 ES6 一行代码去重\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [_vm._v(\"只针对一维数组，并且对象无法去重。\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-js line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-js\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" a \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"3\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'1'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'2'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"false\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"null\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"undefined\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"NaN\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\nconsole\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"log\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"...\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"new\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"Set\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"a\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"          \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v('//[1, 2, 3, \"1\", true, \"2\", false, null, undefined, NaN]')\n            ]),\n            _vm._v(\"\\nconsole\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"log\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"Array\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"from\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"new\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"Set\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"a\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"   \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v('//[1, 2, 3, \"1\", true, \"2\", false, null, undefined, NaN]')\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"h4\", { attrs: { id: \"_7、数组元素为对象去重\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_7、数组元素为对象去重\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 7、数组元素为对象去重\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [\n          _vm._v(\"先来了解一下reduceRight\"),\n          _c(\"br\"),\n          _vm._v(\n            \"\\nreduceRight() : 从数组的末尾向前将数组中的数组项做累加。接收 callbackfn ( function callbackfn ( preValue, curValue, index, array ) ) 函数，而这个函数包含四个参数：\"\n          ),\n          _c(\"br\"),\n          _vm._v(\" \"),\n          _c(\"strong\", [_vm._v(\"preValue\")]),\n          _vm._v(\n            \": 上一次调用回调返回的值，或者是提供的初始值（initialValue）。\\n\"\n          ),\n          _c(\"strong\", [_vm._v(\"curValue\")]),\n          _vm._v(\": 数组中当前被处理的数组项。\"),\n          _c(\"br\"),\n          _vm._v(\" \"),\n          _c(\"strong\", [_vm._v(\"index\")]),\n          _vm._v(\": 当前数组项在数组中的索引值。\"),\n          _c(\"br\"),\n          _vm._v(\" \"),\n          _c(\"strong\", [_vm._v(\"array\")]),\n          _vm._v(\": 调用 reduce()方法的数组。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [\n          _vm._v(\n            \"需要根据对象中唯一的 id 来作为唯一标示去重。初始值 initialValue 赋值为空数组（也就是 item 初始时为 [] )，然后判断当前处理元素的 id 是在辅助对象 hash 已有的 key ，不存在则 hash 增加这一条记录，并且把 curValue push 到 preValue 中。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-js line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-js\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" a \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"id\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'ss'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"id\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"2\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'s'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"id\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"3\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'sss'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"id\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"1\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'ss'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"id\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"3\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'sss'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"id\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"4\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\"name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'ssss'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" hash \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"var\")\n            ]),\n            _vm._v(\" newArr \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" a\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"reduceRight\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token parameter\" } }, [\n              _vm._v(\"preValue\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\",\")\n              ]),\n              _vm._v(\" curValue\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=>\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n    hash\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"curValue\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"id\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"?\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"''\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\":\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"hash\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _vm._v(\"curValue\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"id\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token boolean\" } }, [\n              _vm._v(\"true\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"&&\")\n            ]),\n            _vm._v(\" preValue\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"push\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"curValue\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n    \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"return\")\n            ]),\n            _vm._v(\" preValue\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\\nconsole\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"log\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"newArr\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"  \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                '//[{id: 4, name: \"ssss\"},{id: 3, name: \"sss\"},{id: 1, name: \"ss\"},{id: 2, name: \"s\"}]'\n              )\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"7\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"8\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"9\")]),\n          _c(\"br\")\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}