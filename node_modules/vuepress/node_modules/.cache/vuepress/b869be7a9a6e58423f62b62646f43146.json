{"remainingRequest":"/Users/yanping/Documents/songyp/blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yanping/Documents/songyp/blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yanping/Documents/songyp/blog/docs/fe/js/inheritance.md?vue&type=template&id=42bf9ce2&","dependencies":[{"path":"/Users/yanping/Documents/songyp/blog/docs/fe/js/inheritance.md","mtime":1617951025000},{"path":"/Users/yanping/Documents/songyp/blog/node_modules/cache-loader/dist/cjs.js","mtime":1617951026000},{"path":"/Users/yanping/Documents/songyp/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1617951029000},{"path":"/Users/yanping/Documents/songyp/blog/node_modules/cache-loader/dist/cjs.js","mtime":1617951026000},{"path":"/Users/yanping/Documents/songyp/blog/node_modules/vue-loader/lib/index.js","mtime":1617951029000},{"path":"/Users/yanping/Documents/songyp/blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1617951030000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"继承方法\"><a class=\"header-anchor\" href=\"#继承方法\" aria-hidden=\"true\">#</a> 继承方法</h2>\n<p>上一篇文章中讨论了原型和原型链，这篇文章主要是来讲一下原型相关的继承。</p>\n<h3 id=\"原型链继承\"><a class=\"header-anchor\" href=\"#原型链继承\" aria-hidden=\"true\">#</a> 原型链继承</h3>\n<p>对象可以通过原型链来继承原型的方法和属性。原型链继承本质：<strong>重写原型对象，代之以一个新类型的实例</strong>。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'animal'</span>            <span class=\"token comment\">// 跟子类的属性重名，只能通过 __proto__ 访问</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>childs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type\n<span class=\"token punctuation\">}</span>\n\nAnimal<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">+</span> <span class=\"token string\">' can run'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> characteristic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characteristic <span class=\"token operator\">=</span> characteristic\n<span class=\"token punctuation\">}</span>\n\nDog<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 关键，重写原型对象</span>\nDog<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Dog     <span class=\"token comment\">// 第一点，需要手动重写 constructor 指向</span>\nDog<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">swim</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 第二点，子类添加属性和方法需要在替换原型之后</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' can swim'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> erha <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'erha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fool'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 第四点，无法向父类型的构造函数传参</span>\nerha<span class=\"token punctuation\">.</span>childs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">// 第三点，对于引用类型的修改</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>erha<span class=\"token punctuation\">.</span>childs<span class=\"token punctuation\">)</span>            <span class=\"token comment\">// [\"dog\", \"cat\"]</span>\n<span class=\"token keyword\">var</span> teddy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'teddy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cute'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>teddy<span class=\"token punctuation\">.</span>childs<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [\"dog\", \"cat\"]</span>\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br></div><!--beforeend--></div><!--afterend--><p>从上面的例子可以看出，原型链继承有以下几个缺点：</p>\n<ul>\n<li>需要手动重写 <code>constructor</code> 属性</li>\n<li>子类添加属性和方法必须要在替换原型之后</li>\n<li>创建子类实例时无法向父类的构造函数传参</li>\n<li>最致命的一点是，某个实例对于原型上引用类型的数据进行修改会影响其他的实例</li>\n<li>存在属性遮蔽，如果子类的属性、方法跟父类命名一样，父类的属性或者方法只能通过 <code>__proto__</code> 来获取。</li>\n</ul>\n<h3 id=\"借用构造函数继承\"><a class=\"header-anchor\" href=\"#借用构造函数继承\" aria-hidden=\"true\">#</a> 借用构造函数继承</h3>\n<p>使用<strong>父类的构造函数</strong>来增强子类实例，等同于复制父类的实例给子类(不使用原型)。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'animal'</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>childs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type\n<span class=\"token punctuation\">}</span>\n\nAnimal<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">+</span> <span class=\"token string\">' can run'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> characteristic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characteristic <span class=\"token operator\">=</span> characteristic\n  Animal<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 这里是关键，调用父类的构造函数</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> erha <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'erha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fool'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> teddy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'teddy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cute'</span><span class=\"token punctuation\">)</span>\nerha<span class=\"token punctuation\">.</span>childs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>erha<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>teddy<span class=\"token punctuation\">.</span>childs<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// ['dog']</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div><!--beforeend--></div><!--afterend--><p>从上面的例子可以看出</p>\n<ul>\n<li>子类只能继承父类的实例方法和属性，无法继承原型的方法和属性</li>\n<li>虽然解决了上面原型链继承对于引用类型修改会出现纂改的问题，但是无法实现复用，每个子类都有父类实例函数的副本，影响性能</li>\n</ul>\n<h3 id=\"组合继承\"><a class=\"header-anchor\" href=\"#组合继承\" aria-hidden=\"true\">#</a> 组合继承</h3>\n<p>用<strong>原型链</strong>来继承原型的方法和属性，用<strong>借用构造函数</strong>来实现实例属性的继承。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\nAnimal<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'animal'</span>\nAnimal<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">+</span> <span class=\"token string\">' can run'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> characteristic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characteristic <span class=\"token operator\">=</span> characteristic\n  Animal<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 实例属性和方法继承</span>\n<span class=\"token punctuation\">}</span>\n\nDog<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//原型属性和方法继承</span>\nDog<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Dog\nDog<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">swim</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">'swim'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> erha <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'erha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fool'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> teddy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'teddy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cute'</span><span class=\"token punctuation\">)</span>\nerha<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//dog can run</span>\nerha<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nerha<span class=\"token punctuation\">.</span>list   <span class=\"token comment\">// [1,2,3]</span>\nteddy<span class=\"token punctuation\">.</span>list  <span class=\"token comment\">// [1,2]</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div><!--beforeend--></div><!--afterend--><p>虽然目前可以复用原型链上的方法以及子类又有各自的属性，但是有个问题就是，父类的构造函数调用了两次，子类的原型(Dog.prototype)上也有一份父类实例属性的副本，而且这些属性会被子类实例(erha, teddy)的属性覆盖，即通过 erha.name 访问不到 Dog.prototype 的 name 属性，还是存在内存浪费。</p>\n<h3 id=\"原型式继承\"><a class=\"header-anchor\" href=\"#原型式继承\" aria-hidden=\"true\">#</a> 原型式继承</h3>\n<p>该方法最初由道格拉斯·克罗克福德于2006年在一篇题为 《Prototypal Inheritance in JavaScript》(JavaScript中的原型式继承) 的文章中提出。 他的想法是借助原型可以基于已有的对象创建新对象， 同时还不必因此创建自定义类型。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 自定义对象作为原型</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'user name'</span><span class=\"token punctuation\">,</span>\n  friends<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\np1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'xiaoming'</span>\np1<span class=\"token punctuation\">.</span>idol <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'lee'</span><span class=\"token punctuation\">]</span>\np1<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xiaofeng'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"xiaofeng\"]</span>\n\n<span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\np2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'xiaoqing'</span>\np2<span class=\"token punctuation\">.</span>idol <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vim'</span><span class=\"token punctuation\">]</span>\np2<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xiaomin'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"xiaofeng\", \"xiaomin\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"xiaofeng\", \"xiaomin\"]</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div><!--beforeend--></div><!--afterend--><p>先看 createObject 函数，先是定义一个临时的构造函数 F()，把作为“原型”的对象 person 赋值给 F.prototype，接着返回 <code>new F()</code>，因为构造函数没有定义任何属性，所以返回一个空对象，这个对象的 <code>__proto__</code> 则指向“原型”对象，从而继承了“原型”对象 person 的属性。<br>\n从上面的列子可以看出，就是对于原型的引用类型进行修改会出现篡改的情况。<br>\n在 ECMAScript5 中，通过新增 Object.create() 方法规范化了上面的原型式继承。<br>\n用法：Object.create(proto[, propertiesObject])</p>\n<ul>\n<li>新创建对象的原型对象。</li>\n<li>可选。如果没有指定为 undefined，则是要添加到新创建对象的可枚举属性（即其自身定义的属性，而不是其原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应Object.defineProperties()的第二个参数。</li>\n</ul>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 自定义对象作为原型</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'user name'</span><span class=\"token punctuation\">,</span>\n  friends<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"寄生式继承\"><a class=\"header-anchor\" href=\"#寄生式继承\" aria-hidden=\"true\">#</a> 寄生式继承</h3>\n<p>寄生式继承是与原型式继承紧密相关的一种思路， 同样是克罗克福德推而广之。<br>\n寄生式继承，即创建一个仅用于封装继承过程的函数，该函数内部以某种方法来增强对象，最后再像真的对它做了所有操作之后返回对象。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createAnother</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 调用 Object.create 函数创建一个对象</span>\n  clone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 以某种方法来增强对象</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> clone   <span class=\"token comment\">// 返回这个对象</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'user name'</span><span class=\"token punctuation\">,</span>\n  friends<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"寄生式组合继承\"><a class=\"header-anchor\" href=\"#寄生式组合继承\" aria-hidden=\"true\">#</a> 寄生式组合继承</h3>\n<p>结合借用构造函数<strong>传递参数</strong>和寄生模式实现继承。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>subType<span class=\"token punctuation\">,</span> superType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>superType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建对象，创建父类原型的一个副本</span>\n  prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subType                    <span class=\"token comment\">// 增强对象，弥补因重写原型而失去的默认的constructor 属性</span>\n  subType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype                      <span class=\"token comment\">// 指定对象，将新创建的对象赋值给子类的原型</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 父类初始化实例属性和原型属性</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nSuperType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  SuperType<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将子类原型指向父类</span>\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>SubType<span class=\"token punctuation\">,</span> SuperType<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 新增子类原型属性</span>\nSubType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayAge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> instance1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xyc'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> instance2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lxy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n\ninstance1<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"red\", \"blue\", \"green\", \"2\"]</span>\ninstance2<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"red\", \"blue\", \"green\", \"3\"]</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br></div><!--beforeend--></div><!--afterend--></div>\n",null]}